#pragma once
#ifndef CHUNK_HPP
#define CHUNK_HPP

#include <vector>

#include "GL/glew.h"
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>

#include "shader_world.hpp"

enum class block_type : uint8_t {
	none = 0,
	sand = 1,
	// brick,

	cnt
};

struct chunk_t {
	static constexpr int8_t WIDTH = 32;
	static constexpr int8_t HEIGHT = 32;
	static constexpr int8_t DEPTH = 32;

	block_type content[WIDTH][HEIGHT][DEPTH];

	static void init_static(shader_world_t *pshader);
	static void deinit_static();
	chunk_t();
	~chunk_t();

	void flush_content_for_drawing();
	void draw(
		const glm::mat4 &projection_matrix,
		const glm::mat4 &view_matrix,
		const glm::mat4 &model_matrix,
		const glm::vec3 &light_pos
	);

private:
	static shader_world_t *pshader;

	// Static shader data
	static GLuint texture_id; // All blocks combined texture
	static GLuint block_model_uniform_buffer_id;

	// Per chunk shader data
	GLuint vao_id;
	GLuint content_buffer_id;

private:
	static constexpr size_t BLOCK_VERTICES_CNT = 6*2*3;
	static constexpr GLfloat BLOCK_POSITIONS[] = {
		1.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  1.000000, 0.000000,
		1.000000,  1.000000,  1.000000, 0.000000,
		0.000000,  1.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  0.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		0.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  1.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		1.000000,  0.000000,  1.000000, 0.000000,
		1.000000,  1.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  1.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  1.000000, 0.000000,
		0.000000,  1.000000,  1.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  0.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		1.000000,  1.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  1.000000,  1.000000, 0.000000,
		0.000000,  1.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		1.000000,  1.000000,  0.000000, 0.000000,
		1.000000,  1.000000,  1.000000, 0.000000,
		1.000000,  0.000000,  1.000000, 0.000000,
	};

	// For now only the sand texture is supported
	static constexpr GLfloat BLOCK_UVS[] = {
		0.999900, -0.000100, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.999900, -0.000100, 0.000000, 0.000000,
		0.999900, -0.000100, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.999900, -0.000100, 0.000000, 0.000000,
		0.999900, -0.000100, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.999900, -0.000100, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.999900, -0.000100, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
		0.999900, -0.000100, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.999900, -0.999900, 0.000000, 0.000000,
		0.000100, -0.999900, 0.000000, 0.000000,
		0.000100, -0.000100, 0.000000, 0.000000,
	};

	static constexpr GLfloat BLOCK_NORMALS[] = {
		0.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		-1.000000,  0.000000,  0.000000, 0.000000,
		-1.000000,  0.000000,  0.000000, 0.000000,
		-1.000000,  0.000000,  0.000000, 0.000000,
		0.000000,  0.000000, -1.000000, 0.000000,
		0.000000,  0.000000, -1.000000, 0.000000,
		0.000000,  0.000000, -1.000000, 0.000000,
		0.000000, -1.000000,  0.000000, 0.000000,
		0.000000, -1.000000,  0.000000, 0.000000,
		0.000000, -1.000000,  0.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		0.000000,  1.000000,  0.000000, 0.000000,
		-1.000000,  0.000000,  0.000000, 0.000000,
		-1.000000,  0.000000,  0.000000, 0.000000,
		-1.000000,  0.000000,  0.000000, 0.000000,
		0.000000,  0.000000, -1.000000, 0.000000,
		0.000000,  0.000000, -1.000000, 0.000000,
		0.000000,  0.000000, -1.000000, 0.000000,
		0.000000, -1.000000,  0.000000, 0.000000,
		0.000000, -1.000000,  0.000000, 0.000000,
		0.000000, -1.000000,  0.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		0.000000,  0.000000,  1.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
		1.000000,  0.000000,  0.000000, 0.000000,
	};
};

#endif
