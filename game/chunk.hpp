#pragma once
#ifndef CHUNK_HPP
#define CHUNK_HPP

#include <vector>

#include <GLFW/glfw3.h>
#include <glm/glm.hpp>

#include "utils/objloader.hpp"

enum class block_type : uint8_t {
	none = 0,
	sand = 1,
	// brick,

	cnt
};

struct chunk_t {
	static constexpr size_t width = 16;
	static constexpr size_t height = 16;
	static constexpr size_t depth = 16;

	std::vector<std::vector<std::vector<block_type>>> content;
	std::vector<std::vector<std::vector<bool>>> is_autogenerated;

	chunk_t();

	// std::vector<GLfloat> vertex_buffer;
	// std::vector<GLfloat> vertex_uvs;
	// std::vector<GLfloat> vertex_normals;

	// void update_buffers();

	// static constexpr size_t single_block_points_cnt = 6*2 * 3;
	// static constexpr GLfloat single_block_positions[] = {
	// 	1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// };

	// static constexpr GLfloat single_block_uv[] = {
	// 	0.492188, -0.507812,
	// 	0.257812, -0.742188,
	// 	0.257812, -0.507812,
	// 	0.257812, -0.757812,
	// 	0.492188, -0.992188,
	// 	0.257812, -0.992188,
	// 	0.507812, -0.742188,
	// 	0.742188, -0.507812,
	// 	0.742188, -0.742188,
	// 	0.257812, -0.242188,
	// 	0.492188, -0.007812,
	// 	0.492188, -0.242188,
	// 	0.242188, -0.507812,
	// 	0.007812, -0.742188,
	// 	0.007812, -0.507812,
	// 	0.492188, -0.492188,
	// 	0.257812, -0.257812,
	// 	0.492188, -0.257812,
	// 	0.492188, -0.507812,
	// 	0.492188, -0.742188,
	// 	0.257812, -0.742188,
	// 	0.257812, -0.757812,
	// 	0.492188, -0.757812,
	// 	0.492188, -0.992188,
	// 	0.507812, -0.742188,
	// 	0.507812, -0.507812,
	// 	0.742188, -0.507812,
	// 	0.257812, -0.242188,
	// 	0.257812, -0.007812,
	// 	0.492188, -0.007812,
	// 	0.242188, -0.507812,
	// 	0.242188, -0.742188,
	// 	0.007812, -0.742188,
	// 	0.492188, -0.492188,
	// 	0.257812, -0.492188,
	// 	0.257812, -0.257812,
	// };

	// static constexpr GLfloat single_block_normals[] = {
	// 	1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	1.000000,  1.000000, -1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	1.000000, -1.000000,  1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	1.000000, -1.000000, -1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000, -1.000000,
	// 	-1.000000, -1.000000, -1.000000,
	// 	1.000000,  1.000000,  1.000000,
	// 	-1.000000,  1.000000,  1.000000,
	// 	-1.000000, -1.000000,  1.000000,
	// };
};

#endif
