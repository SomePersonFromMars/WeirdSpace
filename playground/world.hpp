#pragma once
#ifndef WORLD_HPP
#define WORLD_HPP

#include <vector>

#include <GLFW/glfw3.h>
#include <glm/glm.hpp>

#include "utils/objloader.hpp"

struct world_t {
	const size_t width;
	const size_t height;
	const size_t depth;

	std::vector<std::vector<std::vector<uint8_t>>> content;

	world_t(size_t width, size_t height, size_t depth);

	std::vector<GLfloat> vertex_buffer;
	// std::vector<GLfloat> vertex_colors;
	std::vector<GLfloat> vertex_uvs;

	void update_buffers();

	static constexpr size_t single_block_points_cnt = 6*2 * 3;
	static constexpr GLfloat single_block_positions[] = {
		1.000000,  1.000000,  1.000000,
		-1.000000,  1.000000, -1.000000,
		-1.000000,  1.000000,  1.000000,
		-1.000000,  1.000000, -1.000000,
		1.000000, -1.000000, -1.000000,
		-1.000000, -1.000000, -1.000000,
		1.000000,  1.000000, -1.000000,
		1.000000, -1.000000,  1.000000,
		1.000000, -1.000000, -1.000000,
		-1.000000, -1.000000,  1.000000,
		1.000000, -1.000000, -1.000000,
		1.000000, -1.000000,  1.000000,
		-1.000000,  1.000000,  1.000000,
		-1.000000, -1.000000, -1.000000,
		-1.000000, -1.000000,  1.000000,
		1.000000,  1.000000,  1.000000,
		-1.000000, -1.000000,  1.000000,
		1.000000, -1.000000,  1.000000,
		1.000000,  1.000000,  1.000000,
		1.000000,  1.000000, -1.000000,
		-1.000000,  1.000000, -1.000000,
		-1.000000,  1.000000, -1.000000,
		1.000000,  1.000000, -1.000000,
		1.000000, -1.000000, -1.000000,
		1.000000,  1.000000, -1.000000,
		1.000000,  1.000000,  1.000000,
		1.000000, -1.000000,  1.000000,
		-1.000000, -1.000000,  1.000000,
		-1.000000, -1.000000, -1.000000,
		1.000000, -1.000000, -1.000000,
		-1.000000,  1.000000,  1.000000,
		-1.000000,  1.000000, -1.000000,
		-1.000000, -1.000000, -1.000000,
		1.000000,  1.000000,  1.000000,
		-1.000000,  1.000000,  1.000000,
		-1.000000, -1.000000,  1.000000,
	};

	static constexpr GLfloat single_block_uv[] = {
		0.492188, -0.507812,
		0.257812, -0.742188,
		0.257812, -0.507812,
		0.257812, -0.757812,
		0.492188, -0.992188,
		0.257812, -0.992188,
		0.507812, -0.742188,
		0.742188, -0.507812,
		0.742188, -0.742188,
		0.257812, -0.242188,
		0.492188, -0.007812,
		0.492188, -0.242188,
		0.242188, -0.507812,
		0.007812, -0.742188,
		0.007812, -0.507812,
		0.492188, -0.492188,
		0.257812, -0.257812,
		0.492188, -0.257812,
		0.492188, -0.507812,
		0.492188, -0.742188,
		0.257812, -0.742188,
		0.257812, -0.757812,
		0.492188, -0.757812,
		0.492188, -0.992188,
		0.507812, -0.742188,
		0.507812, -0.507812,
		0.742188, -0.507812,
		0.257812, -0.242188,
		0.257812, -0.007812,
		0.492188, -0.007812,
		0.242188, -0.507812,
		0.242188, -0.742188,
		0.007812, -0.742188,
		0.492188, -0.492188,
		0.257812, -0.492188,
		0.257812, -0.257812,
	};
};

#endif
